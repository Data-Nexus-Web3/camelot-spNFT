// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CreateNitroPool extends ethereum.Event {
  get params(): CreateNitroPool__Params {
    return new CreateNitroPool__Params(this);
  }
}

export class CreateNitroPool__Params {
  _event: CreateNitroPool;

  constructor(event: CreateNitroPool) {
    this._event = event;
  }

  get nitroAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PublishNitroPool extends ethereum.Event {
  get params(): PublishNitroPool__Params {
    return new PublishNitroPool__Params(this);
  }
}

export class PublishNitroPool__Params {
  _event: PublishNitroPool;

  constructor(event: PublishNitroPool) {
    this._event = event;
  }

  get nitroAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SetDefaultFee extends ethereum.Event {
  get params(): SetDefaultFee__Params {
    return new SetDefaultFee__Params(this);
  }
}

export class SetDefaultFee__Params {
  _event: SetDefaultFee;

  constructor(event: SetDefaultFee) {
    this._event = event;
  }

  get fee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SetEmergencyRecoveryAddress extends ethereum.Event {
  get params(): SetEmergencyRecoveryAddress__Params {
    return new SetEmergencyRecoveryAddress__Params(this);
  }
}

export class SetEmergencyRecoveryAddress__Params {
  _event: SetEmergencyRecoveryAddress;

  constructor(event: SetEmergencyRecoveryAddress) {
    this._event = event;
  }

  get emergencyRecoveryAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SetExemptedAddress extends ethereum.Event {
  get params(): SetExemptedAddress__Params {
    return new SetExemptedAddress__Params(this);
  }
}

export class SetExemptedAddress__Params {
  _event: SetExemptedAddress;

  constructor(event: SetExemptedAddress) {
    this._event = event;
  }

  get exemptedAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get isExempted(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class SetFeeAddress extends ethereum.Event {
  get params(): SetFeeAddress__Params {
    return new SetFeeAddress__Params(this);
  }
}

export class SetFeeAddress__Params {
  _event: SetFeeAddress;

  constructor(event: SetFeeAddress) {
    this._event = event;
  }

  get feeAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SetNitroPoolOwner extends ethereum.Event {
  get params(): SetNitroPoolOwner__Params {
    return new SetNitroPoolOwner__Params(this);
  }
}

export class SetNitroPoolOwner__Params {
  _event: SetNitroPoolOwner;

  constructor(event: SetNitroPoolOwner) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NitroPoolFactory__createNitroPoolInputSettingsStruct extends ethereum.Tuple {
  get startTime(): BigInt {
    return this[0].toBigInt();
  }

  get endTime(): BigInt {
    return this[1].toBigInt();
  }

  get harvestStartTime(): BigInt {
    return this[2].toBigInt();
  }

  get depositEndTime(): BigInt {
    return this[3].toBigInt();
  }

  get lockDurationReq(): BigInt {
    return this[4].toBigInt();
  }

  get lockEndReq(): BigInt {
    return this[5].toBigInt();
  }

  get depositAmountReq(): BigInt {
    return this[6].toBigInt();
  }

  get whitelist(): boolean {
    return this[7].toBoolean();
  }

  get description(): string {
    return this[8].toString();
  }
}

export class NitroPoolFactory extends ethereum.SmartContract {
  static bind(address: Address): NitroPoolFactory {
    return new NitroPoolFactory("NitroPoolFactory", address);
  }

  MAX_DEFAULT_FEE(): BigInt {
    let result = super.call(
      "MAX_DEFAULT_FEE",
      "MAX_DEFAULT_FEE():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_DEFAULT_FEE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_DEFAULT_FEE",
      "MAX_DEFAULT_FEE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createNitroPool(
    nftPoolAddress: Address,
    rewardsToken1: Address,
    rewardsToken2: Address,
    settings: NitroPoolFactory__createNitroPoolInputSettingsStruct
  ): Address {
    let result = super.call(
      "createNitroPool",
      "createNitroPool(address,address,address,(uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool,string)):(address)",
      [
        ethereum.Value.fromAddress(nftPoolAddress),
        ethereum.Value.fromAddress(rewardsToken1),
        ethereum.Value.fromAddress(rewardsToken2),
        ethereum.Value.fromTuple(settings)
      ]
    );

    return result[0].toAddress();
  }

  try_createNitroPool(
    nftPoolAddress: Address,
    rewardsToken1: Address,
    rewardsToken2: Address,
    settings: NitroPoolFactory__createNitroPoolInputSettingsStruct
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createNitroPool",
      "createNitroPool(address,address,address,(uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool,string)):(address)",
      [
        ethereum.Value.fromAddress(nftPoolAddress),
        ethereum.Value.fromAddress(rewardsToken1),
        ethereum.Value.fromAddress(rewardsToken2),
        ethereum.Value.fromTuple(settings)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  defaultFee(): BigInt {
    let result = super.call("defaultFee", "defaultFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_defaultFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("defaultFee", "defaultFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  emergencyRecoveryAddress(): Address {
    let result = super.call(
      "emergencyRecoveryAddress",
      "emergencyRecoveryAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_emergencyRecoveryAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "emergencyRecoveryAddress",
      "emergencyRecoveryAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  exemptedAddressesLength(): BigInt {
    let result = super.call(
      "exemptedAddressesLength",
      "exemptedAddressesLength():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_exemptedAddressesLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "exemptedAddressesLength",
      "exemptedAddressesLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  feeAddress(): Address {
    let result = super.call("feeAddress", "feeAddress():(address)", []);

    return result[0].toAddress();
  }

  try_feeAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("feeAddress", "feeAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getExemptedAddress(index: BigInt): Address {
    let result = super.call(
      "getExemptedAddress",
      "getExemptedAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );

    return result[0].toAddress();
  }

  try_getExemptedAddress(index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getExemptedAddress",
      "getExemptedAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getNftPoolPublishedNitroPool(
    nftPoolAddress: Address,
    index: BigInt
  ): Address {
    let result = super.call(
      "getNftPoolPublishedNitroPool",
      "getNftPoolPublishedNitroPool(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(nftPoolAddress),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toAddress();
  }

  try_getNftPoolPublishedNitroPool(
    nftPoolAddress: Address,
    index: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getNftPoolPublishedNitroPool",
      "getNftPoolPublishedNitroPool(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(nftPoolAddress),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getNitroPool(index: BigInt): Address {
    let result = super.call("getNitroPool", "getNitroPool(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toAddress();
  }

  try_getNitroPool(index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getNitroPool",
      "getNitroPool(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getNitroPoolFee(nitroPoolAddress: Address, ownerAddress: Address): BigInt {
    let result = super.call(
      "getNitroPoolFee",
      "getNitroPoolFee(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(nitroPoolAddress),
        ethereum.Value.fromAddress(ownerAddress)
      ]
    );

    return result[0].toBigInt();
  }

  try_getNitroPoolFee(
    nitroPoolAddress: Address,
    ownerAddress: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNitroPoolFee",
      "getNitroPoolFee(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(nitroPoolAddress),
        ethereum.Value.fromAddress(ownerAddress)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOwnerNitroPool(userAddress: Address, index: BigInt): Address {
    let result = super.call(
      "getOwnerNitroPool",
      "getOwnerNitroPool(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(userAddress),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toAddress();
  }

  try_getOwnerNitroPool(
    userAddress: Address,
    index: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getOwnerNitroPool",
      "getOwnerNitroPool(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(userAddress),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPublishedNitroPool(index: BigInt): Address {
    let result = super.call(
      "getPublishedNitroPool",
      "getPublishedNitroPool(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );

    return result[0].toAddress();
  }

  try_getPublishedNitroPool(index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getPublishedNitroPool",
      "getPublishedNitroPool(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  grailToken(): Address {
    let result = super.call("grailToken", "grailToken():(address)", []);

    return result[0].toAddress();
  }

  try_grailToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("grailToken", "grailToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isExemptedAddress(checkedAddress: Address): boolean {
    let result = super.call(
      "isExemptedAddress",
      "isExemptedAddress(address):(bool)",
      [ethereum.Value.fromAddress(checkedAddress)]
    );

    return result[0].toBoolean();
  }

  try_isExemptedAddress(checkedAddress: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isExemptedAddress",
      "isExemptedAddress(address):(bool)",
      [ethereum.Value.fromAddress(checkedAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  nftPoolPublishedNitroPoolsLength(nftPoolAddress: Address): BigInt {
    let result = super.call(
      "nftPoolPublishedNitroPoolsLength",
      "nftPoolPublishedNitroPoolsLength(address):(uint256)",
      [ethereum.Value.fromAddress(nftPoolAddress)]
    );

    return result[0].toBigInt();
  }

  try_nftPoolPublishedNitroPoolsLength(
    nftPoolAddress: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nftPoolPublishedNitroPoolsLength",
      "nftPoolPublishedNitroPoolsLength(address):(uint256)",
      [ethereum.Value.fromAddress(nftPoolAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nitroPoolsLength(): BigInt {
    let result = super.call(
      "nitroPoolsLength",
      "nitroPoolsLength():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_nitroPoolsLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nitroPoolsLength",
      "nitroPoolsLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerNitroPoolsLength(userAddress: Address): BigInt {
    let result = super.call(
      "ownerNitroPoolsLength",
      "ownerNitroPoolsLength(address):(uint256)",
      [ethereum.Value.fromAddress(userAddress)]
    );

    return result[0].toBigInt();
  }

  try_ownerNitroPoolsLength(userAddress: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ownerNitroPoolsLength",
      "ownerNitroPoolsLength(address):(uint256)",
      [ethereum.Value.fromAddress(userAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  publishedNitroPoolsLength(): BigInt {
    let result = super.call(
      "publishedNitroPoolsLength",
      "publishedNitroPoolsLength():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_publishedNitroPoolsLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "publishedNitroPoolsLength",
      "publishedNitroPoolsLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  xGrailToken(): Address {
    let result = super.call("xGrailToken", "xGrailToken():(address)", []);

    return result[0].toAddress();
  }

  try_xGrailToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("xGrailToken", "xGrailToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get grailToken_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get xGrailToken_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get emergencyRecoveryAddress_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get feeAddress_(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateNitroPoolCall extends ethereum.Call {
  get inputs(): CreateNitroPoolCall__Inputs {
    return new CreateNitroPoolCall__Inputs(this);
  }

  get outputs(): CreateNitroPoolCall__Outputs {
    return new CreateNitroPoolCall__Outputs(this);
  }
}

export class CreateNitroPoolCall__Inputs {
  _call: CreateNitroPoolCall;

  constructor(call: CreateNitroPoolCall) {
    this._call = call;
  }

  get nftPoolAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get rewardsToken1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get rewardsToken2(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get settings(): CreateNitroPoolCallSettingsStruct {
    return changetype<CreateNitroPoolCallSettingsStruct>(
      this._call.inputValues[3].value.toTuple()
    );
  }
}

export class CreateNitroPoolCall__Outputs {
  _call: CreateNitroPoolCall;

  constructor(call: CreateNitroPoolCall) {
    this._call = call;
  }

  get nitroPool(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class CreateNitroPoolCallSettingsStruct extends ethereum.Tuple {
  get startTime(): BigInt {
    return this[0].toBigInt();
  }

  get endTime(): BigInt {
    return this[1].toBigInt();
  }

  get harvestStartTime(): BigInt {
    return this[2].toBigInt();
  }

  get depositEndTime(): BigInt {
    return this[3].toBigInt();
  }

  get lockDurationReq(): BigInt {
    return this[4].toBigInt();
  }

  get lockEndReq(): BigInt {
    return this[5].toBigInt();
  }

  get depositAmountReq(): BigInt {
    return this[6].toBigInt();
  }

  get whitelist(): boolean {
    return this[7].toBoolean();
  }

  get description(): string {
    return this[8].toString();
  }
}

export class PublishNitroPoolCall extends ethereum.Call {
  get inputs(): PublishNitroPoolCall__Inputs {
    return new PublishNitroPoolCall__Inputs(this);
  }

  get outputs(): PublishNitroPoolCall__Outputs {
    return new PublishNitroPoolCall__Outputs(this);
  }
}

export class PublishNitroPoolCall__Inputs {
  _call: PublishNitroPoolCall;

  constructor(call: PublishNitroPoolCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class PublishNitroPoolCall__Outputs {
  _call: PublishNitroPoolCall;

  constructor(call: PublishNitroPoolCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetDefaultFeeCall extends ethereum.Call {
  get inputs(): SetDefaultFeeCall__Inputs {
    return new SetDefaultFeeCall__Inputs(this);
  }

  get outputs(): SetDefaultFeeCall__Outputs {
    return new SetDefaultFeeCall__Outputs(this);
  }
}

export class SetDefaultFeeCall__Inputs {
  _call: SetDefaultFeeCall;

  constructor(call: SetDefaultFeeCall) {
    this._call = call;
  }

  get newFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetDefaultFeeCall__Outputs {
  _call: SetDefaultFeeCall;

  constructor(call: SetDefaultFeeCall) {
    this._call = call;
  }
}

export class SetEmergencyRecoveryAddressCall extends ethereum.Call {
  get inputs(): SetEmergencyRecoveryAddressCall__Inputs {
    return new SetEmergencyRecoveryAddressCall__Inputs(this);
  }

  get outputs(): SetEmergencyRecoveryAddressCall__Outputs {
    return new SetEmergencyRecoveryAddressCall__Outputs(this);
  }
}

export class SetEmergencyRecoveryAddressCall__Inputs {
  _call: SetEmergencyRecoveryAddressCall;

  constructor(call: SetEmergencyRecoveryAddressCall) {
    this._call = call;
  }

  get emergencyRecoveryAddress_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetEmergencyRecoveryAddressCall__Outputs {
  _call: SetEmergencyRecoveryAddressCall;

  constructor(call: SetEmergencyRecoveryAddressCall) {
    this._call = call;
  }
}

export class SetExemptedAddressCall extends ethereum.Call {
  get inputs(): SetExemptedAddressCall__Inputs {
    return new SetExemptedAddressCall__Inputs(this);
  }

  get outputs(): SetExemptedAddressCall__Outputs {
    return new SetExemptedAddressCall__Outputs(this);
  }
}

export class SetExemptedAddressCall__Inputs {
  _call: SetExemptedAddressCall;

  constructor(call: SetExemptedAddressCall) {
    this._call = call;
  }

  get exemptedAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get isExempted(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetExemptedAddressCall__Outputs {
  _call: SetExemptedAddressCall;

  constructor(call: SetExemptedAddressCall) {
    this._call = call;
  }
}

export class SetFeeAddressCall extends ethereum.Call {
  get inputs(): SetFeeAddressCall__Inputs {
    return new SetFeeAddressCall__Inputs(this);
  }

  get outputs(): SetFeeAddressCall__Outputs {
    return new SetFeeAddressCall__Outputs(this);
  }
}

export class SetFeeAddressCall__Inputs {
  _call: SetFeeAddressCall;

  constructor(call: SetFeeAddressCall) {
    this._call = call;
  }

  get feeAddress_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFeeAddressCall__Outputs {
  _call: SetFeeAddressCall;

  constructor(call: SetFeeAddressCall) {
    this._call = call;
  }
}

export class SetNitroPoolOwnerCall extends ethereum.Call {
  get inputs(): SetNitroPoolOwnerCall__Inputs {
    return new SetNitroPoolOwnerCall__Inputs(this);
  }

  get outputs(): SetNitroPoolOwnerCall__Outputs {
    return new SetNitroPoolOwnerCall__Outputs(this);
  }
}

export class SetNitroPoolOwnerCall__Inputs {
  _call: SetNitroPoolOwnerCall;

  constructor(call: SetNitroPoolOwnerCall) {
    this._call = call;
  }

  get previousOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetNitroPoolOwnerCall__Outputs {
  _call: SetNitroPoolOwnerCall;

  constructor(call: SetNitroPoolOwnerCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
