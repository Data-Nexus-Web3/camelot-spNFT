// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddToPosition extends ethereum.Event {
  get params(): AddToPosition__Params {
    return new AddToPosition__Params(this);
  }
}

export class AddToPosition__Params {
  _event: AddToPosition;

  constructor(event: AddToPosition) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class CreatePosition extends ethereum.Event {
  get params(): CreatePosition__Params {
    return new CreatePosition__Params(this);
  }
}

export class CreatePosition__Params {
  _event: CreatePosition;

  constructor(event: CreatePosition) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get lockDuration(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class EmergencyWithdraw extends ethereum.Event {
  get params(): EmergencyWithdraw__Params {
    return new EmergencyWithdraw__Params(this);
  }
}

export class EmergencyWithdraw__Params {
  _event: EmergencyWithdraw;

  constructor(event: EmergencyWithdraw) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class HarvestPosition extends ethereum.Event {
  get params(): HarvestPosition__Params {
    return new HarvestPosition__Params(this);
  }
}

export class HarvestPosition__Params {
  _event: HarvestPosition;

  constructor(event: HarvestPosition) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get pending(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LockPosition extends ethereum.Event {
  get params(): LockPosition__Params {
    return new LockPosition__Params(this);
  }
}

export class LockPosition__Params {
  _event: LockPosition;

  constructor(event: LockPosition) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get lockDuration(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class MergePositions extends ethereum.Event {
  get params(): MergePositions__Params {
    return new MergePositions__Params(this);
  }
}

export class MergePositions__Params {
  _event: MergePositions;

  constructor(event: MergePositions) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenIds(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }
}

export class PoolUpdated extends ethereum.Event {
  get params(): PoolUpdated__Params {
    return new PoolUpdated__Params(this);
  }
}

export class PoolUpdated__Params {
  _event: PoolUpdated;

  constructor(event: PoolUpdated) {
    this._event = event;
  }

  get lastRewardTime(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get accRewardsPerShare(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SetBoost extends ethereum.Event {
  get params(): SetBoost__Params {
    return new SetBoost__Params(this);
  }
}

export class SetBoost__Params {
  _event: SetBoost;

  constructor(event: SetBoost) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get boostPoints(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SetBoostMultiplierSettings extends ethereum.Event {
  get params(): SetBoostMultiplierSettings__Params {
    return new SetBoostMultiplierSettings__Params(this);
  }
}

export class SetBoostMultiplierSettings__Params {
  _event: SetBoostMultiplierSettings;

  constructor(event: SetBoostMultiplierSettings) {
    this._event = event;
  }

  get maxGlobalMultiplier(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get maxBoostMultiplier(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SetEmergencyUnlock extends ethereum.Event {
  get params(): SetEmergencyUnlock__Params {
    return new SetEmergencyUnlock__Params(this);
  }
}

export class SetEmergencyUnlock__Params {
  _event: SetEmergencyUnlock;

  constructor(event: SetEmergencyUnlock) {
    this._event = event;
  }

  get emergencyUnlock(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class SetLockMultiplierSettings extends ethereum.Event {
  get params(): SetLockMultiplierSettings__Params {
    return new SetLockMultiplierSettings__Params(this);
  }
}

export class SetLockMultiplierSettings__Params {
  _event: SetLockMultiplierSettings;

  constructor(event: SetLockMultiplierSettings) {
    this._event = event;
  }

  get maxLockDuration(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get maxLockMultiplier(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SetOperator extends ethereum.Event {
  get params(): SetOperator__Params {
    return new SetOperator__Params(this);
  }
}

export class SetOperator__Params {
  _event: SetOperator;

  constructor(event: SetOperator) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SetUnlockOperator extends ethereum.Event {
  get params(): SetUnlockOperator__Params {
    return new SetUnlockOperator__Params(this);
  }
}

export class SetUnlockOperator__Params {
  _event: SetUnlockOperator;

  constructor(event: SetUnlockOperator) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get isAdded(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class SetXGrailRewardsShare extends ethereum.Event {
  get params(): SetXGrailRewardsShare__Params {
    return new SetXGrailRewardsShare__Params(this);
  }
}

export class SetXGrailRewardsShare__Params {
  _event: SetXGrailRewardsShare;

  constructor(event: SetXGrailRewardsShare) {
    this._event = event;
  }

  get xGrailRewardsShare(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SplitPosition extends ethereum.Event {
  get params(): SplitPosition__Params {
    return new SplitPosition__Params(this);
  }
}

export class SplitPosition__Params {
  _event: SplitPosition;

  constructor(event: SplitPosition) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get splitAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newTokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class WithdrawFromPosition extends ethereum.Event {
  get params(): WithdrawFromPosition__Params {
    return new WithdrawFromPosition__Params(this);
  }
}

export class WithdrawFromPosition__Params {
  _event: WithdrawFromPosition;

  constructor(event: WithdrawFromPosition) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class NFTPool__getMultiplierSettingsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getMaxGlobalMultiplier(): BigInt {
    return this.value0;
  }

  getMaxLockDuration(): BigInt {
    return this.value1;
  }

  getMaxLockMultiplier(): BigInt {
    return this.value2;
  }

  getMaxBoostMultiplier(): BigInt {
    return this.value3;
  }
}

export class NFTPool__getPoolInfoResult {
  value0: Address;
  value1: Address;
  value2: Address;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;

  constructor(
    value0: Address,
    value1: Address,
    value2: Address,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    return map;
  }

  getLpToken(): Address {
    return this.value0;
  }

  getGrailToken(): Address {
    return this.value1;
  }

  getXGrailToken(): Address {
    return this.value2;
  }

  getLastRewardTime(): BigInt {
    return this.value3;
  }

  getAccRewardsPerShare(): BigInt {
    return this.value4;
  }

  getLpSupply(): BigInt {
    return this.value5;
  }

  getLpSupplyWithMultiplier(): BigInt {
    return this.value6;
  }

  getAllocPoint(): BigInt {
    return this.value7;
  }
}

export class NFTPool__getStakingPositionResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    return map;
  }

  getAmount(): BigInt {
    return this.value0;
  }

  getAmountWithMultiplier(): BigInt {
    return this.value1;
  }

  getStartLockTime(): BigInt {
    return this.value2;
  }

  getLockDuration(): BigInt {
    return this.value3;
  }

  getLockMultiplier(): BigInt {
    return this.value4;
  }

  getRewardDebt(): BigInt {
    return this.value5;
  }

  getBoostPoints(): BigInt {
    return this.value6;
  }

  getTotalMultiplier(): BigInt {
    return this.value7;
  }
}

export class NFTPool extends ethereum.SmartContract {
  static bind(address: Address): NFTPool {
    return new NFTPool("NFTPool", address);
  }

  MAX_BOOST_MULTIPLIER_LIMIT(): BigInt {
    let result = super.call(
      "MAX_BOOST_MULTIPLIER_LIMIT",
      "MAX_BOOST_MULTIPLIER_LIMIT():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_BOOST_MULTIPLIER_LIMIT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_BOOST_MULTIPLIER_LIMIT",
      "MAX_BOOST_MULTIPLIER_LIMIT():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_GLOBAL_MULTIPLIER_LIMIT(): BigInt {
    let result = super.call(
      "MAX_GLOBAL_MULTIPLIER_LIMIT",
      "MAX_GLOBAL_MULTIPLIER_LIMIT():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_GLOBAL_MULTIPLIER_LIMIT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_GLOBAL_MULTIPLIER_LIMIT",
      "MAX_GLOBAL_MULTIPLIER_LIMIT():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_LOCK_MULTIPLIER_LIMIT(): BigInt {
    let result = super.call(
      "MAX_LOCK_MULTIPLIER_LIMIT",
      "MAX_LOCK_MULTIPLIER_LIMIT():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_LOCK_MULTIPLIER_LIMIT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_LOCK_MULTIPLIER_LIMIT",
      "MAX_LOCK_MULTIPLIER_LIMIT():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  baseURI(): string {
    let result = super.call("baseURI", "baseURI():(string)", []);

    return result[0].toString();
  }

  try_baseURI(): ethereum.CallResult<string> {
    let result = super.tryCall("baseURI", "baseURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  emergencyUnlock(): boolean {
    let result = super.call("emergencyUnlock", "emergencyUnlock():(bool)", []);

    return result[0].toBoolean();
  }

  try_emergencyUnlock(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "emergencyUnlock",
      "emergencyUnlock():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  exists(tokenId: BigInt): boolean {
    let result = super.call("exists", "exists(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toBoolean();
  }

  try_exists(tokenId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("exists", "exists(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getMultiplierByBoostPoints(amount: BigInt, boostPoints: BigInt): BigInt {
    let result = super.call(
      "getMultiplierByBoostPoints",
      "getMultiplierByBoostPoints(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(boostPoints)
      ]
    );

    return result[0].toBigInt();
  }

  try_getMultiplierByBoostPoints(
    amount: BigInt,
    boostPoints: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMultiplierByBoostPoints",
      "getMultiplierByBoostPoints(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(boostPoints)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMultiplierByLockDuration(lockDuration: BigInt): BigInt {
    let result = super.call(
      "getMultiplierByLockDuration",
      "getMultiplierByLockDuration(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(lockDuration)]
    );

    return result[0].toBigInt();
  }

  try_getMultiplierByLockDuration(
    lockDuration: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMultiplierByLockDuration",
      "getMultiplierByLockDuration(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(lockDuration)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMultiplierSettings(): NFTPool__getMultiplierSettingsResult {
    let result = super.call(
      "getMultiplierSettings",
      "getMultiplierSettings():(uint256,uint256,uint256,uint256)",
      []
    );

    return new NFTPool__getMultiplierSettingsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_getMultiplierSettings(): ethereum.CallResult<
    NFTPool__getMultiplierSettingsResult
  > {
    let result = super.tryCall(
      "getMultiplierSettings",
      "getMultiplierSettings():(uint256,uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NFTPool__getMultiplierSettingsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  getPoolInfo(): NFTPool__getPoolInfoResult {
    let result = super.call(
      "getPoolInfo",
      "getPoolInfo():(address,address,address,uint256,uint256,uint256,uint256,uint256)",
      []
    );

    return new NFTPool__getPoolInfoResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt()
    );
  }

  try_getPoolInfo(): ethereum.CallResult<NFTPool__getPoolInfoResult> {
    let result = super.tryCall(
      "getPoolInfo",
      "getPoolInfo():(address,address,address,uint256,uint256,uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NFTPool__getPoolInfoResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt()
      )
    );
  }

  getStakingPosition(tokenId: BigInt): NFTPool__getStakingPositionResult {
    let result = super.call(
      "getStakingPosition",
      "getStakingPosition(uint256):(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return new NFTPool__getStakingPositionResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt()
    );
  }

  try_getStakingPosition(
    tokenId: BigInt
  ): ethereum.CallResult<NFTPool__getStakingPositionResult> {
    let result = super.tryCall(
      "getStakingPosition",
      "getStakingPosition(uint256):(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NFTPool__getStakingPositionResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt()
      )
    );
  }

  hasDeposits(): boolean {
    let result = super.call("hasDeposits", "hasDeposits():(bool)", []);

    return result[0].toBoolean();
  }

  try_hasDeposits(): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasDeposits", "hasDeposits():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  initialized(): boolean {
    let result = super.call("initialized", "initialized():(bool)", []);

    return result[0].toBoolean();
  }

  try_initialized(): ethereum.CallResult<boolean> {
    let result = super.tryCall("initialized", "initialized():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isUnlockOperator(_operator: Address): boolean {
    let result = super.call(
      "isUnlockOperator",
      "isUnlockOperator(address):(bool)",
      [ethereum.Value.fromAddress(_operator)]
    );

    return result[0].toBoolean();
  }

  try_isUnlockOperator(_operator: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isUnlockOperator",
      "isUnlockOperator(address):(bool)",
      [ethereum.Value.fromAddress(_operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isUnlocked(): boolean {
    let result = super.call("isUnlocked", "isUnlocked():(bool)", []);

    return result[0].toBoolean();
  }

  try_isUnlocked(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isUnlocked", "isUnlocked():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastTokenId(): BigInt {
    let result = super.call("lastTokenId", "lastTokenId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lastTokenId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lastTokenId", "lastTokenId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  master(): Address {
    let result = super.call("master", "master():(address)", []);

    return result[0].toAddress();
  }

  try_master(): ethereum.CallResult<Address> {
    let result = super.tryCall("master", "master():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  operator(): Address {
    let result = super.call("operator", "operator():(address)", []);

    return result[0].toAddress();
  }

  try_operator(): ethereum.CallResult<Address> {
    let result = super.tryCall("operator", "operator():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pendingRewards(tokenId: BigInt): BigInt {
    let result = super.call(
      "pendingRewards",
      "pendingRewards(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toBigInt();
  }

  try_pendingRewards(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pendingRewards",
      "pendingRewards(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenByIndex(index: BigInt): BigInt {
    let result = super.call("tokenByIndex", "tokenByIndex(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toBigInt();
  }

  try_tokenByIndex(index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenByIndex",
      "tokenByIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenOfOwnerByIndex(owner: Address, index: BigInt): BigInt {
    let result = super.call(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(
    owner: Address,
    index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  unlockOperator(index: BigInt): Address {
    let result = super.call(
      "unlockOperator",
      "unlockOperator(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );

    return result[0].toAddress();
  }

  try_unlockOperator(index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "unlockOperator",
      "unlockOperator(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  unlockOperatorsLength(): BigInt {
    let result = super.call(
      "unlockOperatorsLength",
      "unlockOperatorsLength():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_unlockOperatorsLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "unlockOperatorsLength",
      "unlockOperatorsLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  xGrailRewardsShare(): BigInt {
    let result = super.call(
      "xGrailRewardsShare",
      "xGrailRewardsShare():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_xGrailRewardsShare(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "xGrailRewardsShare",
      "xGrailRewardsShare():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  yieldBooster(): Address {
    let result = super.call("yieldBooster", "yieldBooster():(address)", []);

    return result[0].toAddress();
  }

  try_yieldBooster(): ethereum.CallResult<Address> {
    let result = super.tryCall("yieldBooster", "yieldBooster():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddToPositionCall extends ethereum.Call {
  get inputs(): AddToPositionCall__Inputs {
    return new AddToPositionCall__Inputs(this);
  }

  get outputs(): AddToPositionCall__Outputs {
    return new AddToPositionCall__Outputs(this);
  }
}

export class AddToPositionCall__Inputs {
  _call: AddToPositionCall;

  constructor(call: AddToPositionCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amountToAdd(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AddToPositionCall__Outputs {
  _call: AddToPositionCall;

  constructor(call: AddToPositionCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class BoostCall extends ethereum.Call {
  get inputs(): BoostCall__Inputs {
    return new BoostCall__Inputs(this);
  }

  get outputs(): BoostCall__Outputs {
    return new BoostCall__Outputs(this);
  }
}

export class BoostCall__Inputs {
  _call: BoostCall;

  constructor(call: BoostCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BoostCall__Outputs {
  _call: BoostCall;

  constructor(call: BoostCall) {
    this._call = call;
  }
}

export class CreatePositionCall extends ethereum.Call {
  get inputs(): CreatePositionCall__Inputs {
    return new CreatePositionCall__Inputs(this);
  }

  get outputs(): CreatePositionCall__Outputs {
    return new CreatePositionCall__Outputs(this);
  }
}

export class CreatePositionCall__Inputs {
  _call: CreatePositionCall;

  constructor(call: CreatePositionCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get lockDuration(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CreatePositionCall__Outputs {
  _call: CreatePositionCall;

  constructor(call: CreatePositionCall) {
    this._call = call;
  }
}

export class EmergencyWithdrawCall extends ethereum.Call {
  get inputs(): EmergencyWithdrawCall__Inputs {
    return new EmergencyWithdrawCall__Inputs(this);
  }

  get outputs(): EmergencyWithdrawCall__Outputs {
    return new EmergencyWithdrawCall__Outputs(this);
  }
}

export class EmergencyWithdrawCall__Inputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class EmergencyWithdrawCall__Outputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }
}

export class HarvestPositionCall extends ethereum.Call {
  get inputs(): HarvestPositionCall__Inputs {
    return new HarvestPositionCall__Inputs(this);
  }

  get outputs(): HarvestPositionCall__Outputs {
    return new HarvestPositionCall__Outputs(this);
  }
}

export class HarvestPositionCall__Inputs {
  _call: HarvestPositionCall;

  constructor(call: HarvestPositionCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class HarvestPositionCall__Outputs {
  _call: HarvestPositionCall;

  constructor(call: HarvestPositionCall) {
    this._call = call;
  }
}

export class HarvestPositionToCall extends ethereum.Call {
  get inputs(): HarvestPositionToCall__Inputs {
    return new HarvestPositionToCall__Inputs(this);
  }

  get outputs(): HarvestPositionToCall__Outputs {
    return new HarvestPositionToCall__Outputs(this);
  }
}

export class HarvestPositionToCall__Inputs {
  _call: HarvestPositionToCall;

  constructor(call: HarvestPositionToCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class HarvestPositionToCall__Outputs {
  _call: HarvestPositionToCall;

  constructor(call: HarvestPositionToCall) {
    this._call = call;
  }
}

export class HarvestPositionsToCall extends ethereum.Call {
  get inputs(): HarvestPositionsToCall__Inputs {
    return new HarvestPositionsToCall__Inputs(this);
  }

  get outputs(): HarvestPositionsToCall__Outputs {
    return new HarvestPositionsToCall__Outputs(this);
  }
}

export class HarvestPositionsToCall__Inputs {
  _call: HarvestPositionsToCall;

  constructor(call: HarvestPositionsToCall) {
    this._call = call;
  }

  get tokenIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class HarvestPositionsToCall__Outputs {
  _call: HarvestPositionsToCall;

  constructor(call: HarvestPositionsToCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get master_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get grailToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get xGrailToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get lpToken(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class LockPositionCall extends ethereum.Call {
  get inputs(): LockPositionCall__Inputs {
    return new LockPositionCall__Inputs(this);
  }

  get outputs(): LockPositionCall__Outputs {
    return new LockPositionCall__Outputs(this);
  }
}

export class LockPositionCall__Inputs {
  _call: LockPositionCall;

  constructor(call: LockPositionCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get lockDuration(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class LockPositionCall__Outputs {
  _call: LockPositionCall;

  constructor(call: LockPositionCall) {
    this._call = call;
  }
}

export class MergePositionsCall extends ethereum.Call {
  get inputs(): MergePositionsCall__Inputs {
    return new MergePositionsCall__Inputs(this);
  }

  get outputs(): MergePositionsCall__Outputs {
    return new MergePositionsCall__Outputs(this);
  }
}

export class MergePositionsCall__Inputs {
  _call: MergePositionsCall;

  constructor(call: MergePositionsCall) {
    this._call = call;
  }

  get tokenIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get lockDuration(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MergePositionsCall__Outputs {
  _call: MergePositionsCall;

  constructor(call: MergePositionsCall) {
    this._call = call;
  }
}

export class RenewLockPositionCall extends ethereum.Call {
  get inputs(): RenewLockPositionCall__Inputs {
    return new RenewLockPositionCall__Inputs(this);
  }

  get outputs(): RenewLockPositionCall__Outputs {
    return new RenewLockPositionCall__Outputs(this);
  }
}

export class RenewLockPositionCall__Inputs {
  _call: RenewLockPositionCall;

  constructor(call: RenewLockPositionCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RenewLockPositionCall__Outputs {
  _call: RenewLockPositionCall;

  constructor(call: RenewLockPositionCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetBoostMultiplierSettingsCall extends ethereum.Call {
  get inputs(): SetBoostMultiplierSettingsCall__Inputs {
    return new SetBoostMultiplierSettingsCall__Inputs(this);
  }

  get outputs(): SetBoostMultiplierSettingsCall__Outputs {
    return new SetBoostMultiplierSettingsCall__Outputs(this);
  }
}

export class SetBoostMultiplierSettingsCall__Inputs {
  _call: SetBoostMultiplierSettingsCall;

  constructor(call: SetBoostMultiplierSettingsCall) {
    this._call = call;
  }

  get maxGlobalMultiplier(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get maxBoostMultiplier(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetBoostMultiplierSettingsCall__Outputs {
  _call: SetBoostMultiplierSettingsCall;

  constructor(call: SetBoostMultiplierSettingsCall) {
    this._call = call;
  }
}

export class SetEmergencyUnlockCall extends ethereum.Call {
  get inputs(): SetEmergencyUnlockCall__Inputs {
    return new SetEmergencyUnlockCall__Inputs(this);
  }

  get outputs(): SetEmergencyUnlockCall__Outputs {
    return new SetEmergencyUnlockCall__Outputs(this);
  }
}

export class SetEmergencyUnlockCall__Inputs {
  _call: SetEmergencyUnlockCall;

  constructor(call: SetEmergencyUnlockCall) {
    this._call = call;
  }

  get emergencyUnlock_(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetEmergencyUnlockCall__Outputs {
  _call: SetEmergencyUnlockCall;

  constructor(call: SetEmergencyUnlockCall) {
    this._call = call;
  }
}

export class SetLockMultiplierSettingsCall extends ethereum.Call {
  get inputs(): SetLockMultiplierSettingsCall__Inputs {
    return new SetLockMultiplierSettingsCall__Inputs(this);
  }

  get outputs(): SetLockMultiplierSettingsCall__Outputs {
    return new SetLockMultiplierSettingsCall__Outputs(this);
  }
}

export class SetLockMultiplierSettingsCall__Inputs {
  _call: SetLockMultiplierSettingsCall;

  constructor(call: SetLockMultiplierSettingsCall) {
    this._call = call;
  }

  get maxLockDuration(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get maxLockMultiplier(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetLockMultiplierSettingsCall__Outputs {
  _call: SetLockMultiplierSettingsCall;

  constructor(call: SetLockMultiplierSettingsCall) {
    this._call = call;
  }
}

export class SetOperatorCall extends ethereum.Call {
  get inputs(): SetOperatorCall__Inputs {
    return new SetOperatorCall__Inputs(this);
  }

  get outputs(): SetOperatorCall__Outputs {
    return new SetOperatorCall__Outputs(this);
  }
}

export class SetOperatorCall__Inputs {
  _call: SetOperatorCall;

  constructor(call: SetOperatorCall) {
    this._call = call;
  }

  get operator_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOperatorCall__Outputs {
  _call: SetOperatorCall;

  constructor(call: SetOperatorCall) {
    this._call = call;
  }
}

export class SetUnlockOperatorCall extends ethereum.Call {
  get inputs(): SetUnlockOperatorCall__Inputs {
    return new SetUnlockOperatorCall__Inputs(this);
  }

  get outputs(): SetUnlockOperatorCall__Outputs {
    return new SetUnlockOperatorCall__Outputs(this);
  }
}

export class SetUnlockOperatorCall__Inputs {
  _call: SetUnlockOperatorCall;

  constructor(call: SetUnlockOperatorCall) {
    this._call = call;
  }

  get _operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get add(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetUnlockOperatorCall__Outputs {
  _call: SetUnlockOperatorCall;

  constructor(call: SetUnlockOperatorCall) {
    this._call = call;
  }
}

export class SetXGrailRewardsShareCall extends ethereum.Call {
  get inputs(): SetXGrailRewardsShareCall__Inputs {
    return new SetXGrailRewardsShareCall__Inputs(this);
  }

  get outputs(): SetXGrailRewardsShareCall__Outputs {
    return new SetXGrailRewardsShareCall__Outputs(this);
  }
}

export class SetXGrailRewardsShareCall__Inputs {
  _call: SetXGrailRewardsShareCall;

  constructor(call: SetXGrailRewardsShareCall) {
    this._call = call;
  }

  get xGrailRewardsShare_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetXGrailRewardsShareCall__Outputs {
  _call: SetXGrailRewardsShareCall;

  constructor(call: SetXGrailRewardsShareCall) {
    this._call = call;
  }
}

export class SplitPositionCall extends ethereum.Call {
  get inputs(): SplitPositionCall__Inputs {
    return new SplitPositionCall__Inputs(this);
  }

  get outputs(): SplitPositionCall__Outputs {
    return new SplitPositionCall__Outputs(this);
  }
}

export class SplitPositionCall__Inputs {
  _call: SplitPositionCall;

  constructor(call: SplitPositionCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get splitAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SplitPositionCall__Outputs {
  _call: SplitPositionCall;

  constructor(call: SplitPositionCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class UnboostCall extends ethereum.Call {
  get inputs(): UnboostCall__Inputs {
    return new UnboostCall__Inputs(this);
  }

  get outputs(): UnboostCall__Outputs {
    return new UnboostCall__Outputs(this);
  }
}

export class UnboostCall__Inputs {
  _call: UnboostCall;

  constructor(call: UnboostCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UnboostCall__Outputs {
  _call: UnboostCall;

  constructor(call: UnboostCall) {
    this._call = call;
  }
}

export class UpdatePoolCall extends ethereum.Call {
  get inputs(): UpdatePoolCall__Inputs {
    return new UpdatePoolCall__Inputs(this);
  }

  get outputs(): UpdatePoolCall__Outputs {
    return new UpdatePoolCall__Outputs(this);
  }
}

export class UpdatePoolCall__Inputs {
  _call: UpdatePoolCall;

  constructor(call: UpdatePoolCall) {
    this._call = call;
  }
}

export class UpdatePoolCall__Outputs {
  _call: UpdatePoolCall;

  constructor(call: UpdatePoolCall) {
    this._call = call;
  }
}

export class WithdrawFromPositionCall extends ethereum.Call {
  get inputs(): WithdrawFromPositionCall__Inputs {
    return new WithdrawFromPositionCall__Inputs(this);
  }

  get outputs(): WithdrawFromPositionCall__Outputs {
    return new WithdrawFromPositionCall__Outputs(this);
  }
}

export class WithdrawFromPositionCall__Inputs {
  _call: WithdrawFromPositionCall;

  constructor(call: WithdrawFromPositionCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amountToWithdraw(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawFromPositionCall__Outputs {
  _call: WithdrawFromPositionCall;

  constructor(call: WithdrawFromPositionCall) {
    this._call = call;
  }
}
