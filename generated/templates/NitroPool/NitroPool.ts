// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ActivateEmergencyClose extends ethereum.Event {
  get params(): ActivateEmergencyClose__Params {
    return new ActivateEmergencyClose__Params(this);
  }
}

export class ActivateEmergencyClose__Params {
  _event: ActivateEmergencyClose;

  constructor(event: ActivateEmergencyClose) {
    this._event = event;
  }
}

export class AddRewardsToken1 extends ethereum.Event {
  get params(): AddRewardsToken1__Params {
    return new AddRewardsToken1__Params(this);
  }
}

export class AddRewardsToken1__Params {
  _event: AddRewardsToken1;

  constructor(event: AddRewardsToken1) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get feeAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class AddRewardsToken2 extends ethereum.Event {
  get params(): AddRewardsToken2__Params {
    return new AddRewardsToken2__Params(this);
  }
}

export class AddRewardsToken2__Params {
  _event: AddRewardsToken2;

  constructor(event: AddRewardsToken2) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get feeAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get userAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class EmergencyWithdraw extends ethereum.Event {
  get params(): EmergencyWithdraw__Params {
    return new EmergencyWithdraw__Params(this);
  }
}

export class EmergencyWithdraw__Params {
  _event: EmergencyWithdraw;

  constructor(event: EmergencyWithdraw) {
    this._event = event;
  }

  get userAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Harvest extends ethereum.Event {
  get params(): Harvest__Params {
    return new Harvest__Params(this);
  }
}

export class Harvest__Params {
  _event: Harvest;

  constructor(event: Harvest) {
    this._event = event;
  }

  get userAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get rewardsToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get pending(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Publish extends ethereum.Event {
  get params(): Publish__Params {
    return new Publish__Params(this);
  }
}

export class Publish__Params {
  _event: Publish;

  constructor(event: Publish) {
    this._event = event;
  }
}

export class SetCustomReqContract extends ethereum.Event {
  get params(): SetCustomReqContract__Params {
    return new SetCustomReqContract__Params(this);
  }
}

export class SetCustomReqContract__Params {
  _event: SetCustomReqContract;

  constructor(event: SetCustomReqContract) {
    this._event = event;
  }

  get contractAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SetDateSettings extends ethereum.Event {
  get params(): SetDateSettings__Params {
    return new SetDateSettings__Params(this);
  }
}

export class SetDateSettings__Params {
  _event: SetDateSettings;

  constructor(event: SetDateSettings) {
    this._event = event;
  }

  get endTime(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get harvestStartTime(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get depositEndTime(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SetDescription extends ethereum.Event {
  get params(): SetDescription__Params {
    return new SetDescription__Params(this);
  }
}

export class SetDescription__Params {
  _event: SetDescription;

  constructor(event: SetDescription) {
    this._event = event;
  }

  get description(): string {
    return this._event.parameters[0].value.toString();
  }
}

export class SetRequirements extends ethereum.Event {
  get params(): SetRequirements__Params {
    return new SetRequirements__Params(this);
  }
}

export class SetRequirements__Params {
  _event: SetRequirements;

  constructor(event: SetRequirements) {
    this._event = event;
  }

  get lockDurationReq(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get lockEndReq(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get depositAmountReq(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get whitelist(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }
}

export class SetRewardsToken2 extends ethereum.Event {
  get params(): SetRewardsToken2__Params {
    return new SetRewardsToken2__Params(this);
  }
}

export class SetRewardsToken2__Params {
  _event: SetRewardsToken2;

  constructor(event: SetRewardsToken2) {
    this._event = event;
  }

  get rewardsToken2(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class UpdatePool extends ethereum.Event {
  get params(): UpdatePool__Params {
    return new UpdatePool__Params(this);
  }
}

export class UpdatePool__Params {
  _event: UpdatePool;

  constructor(event: UpdatePool) {
    this._event = event;
  }
}

export class WhitelistUpdated extends ethereum.Event {
  get params(): WhitelistUpdated__Params {
    return new WhitelistUpdated__Params(this);
  }
}

export class WhitelistUpdated__Params {
  _event: WhitelistUpdated;

  constructor(event: WhitelistUpdated) {
    this._event = event;
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get userAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class WithdrawRewardsToken1 extends ethereum.Event {
  get params(): WithdrawRewardsToken1__Params {
    return new WithdrawRewardsToken1__Params(this);
  }
}

export class WithdrawRewardsToken1__Params {
  _event: WithdrawRewardsToken1;

  constructor(event: WithdrawRewardsToken1) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get totalRewardsAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class WithdrawRewardsToken2 extends ethereum.Event {
  get params(): WithdrawRewardsToken2__Params {
    return new WithdrawRewardsToken2__Params(this);
  }
}

export class WithdrawRewardsToken2__Params {
  _event: WithdrawRewardsToken2;

  constructor(event: WithdrawRewardsToken2) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get totalRewardsAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class NitroPool__pendingRewardsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getPending1(): BigInt {
    return this.value0;
  }

  getPending2(): BigInt {
    return this.value1;
  }
}

export class NitroPool__rewardsToken1Result {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: Address, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getToken(): Address {
    return this.value0;
  }

  getAmount(): BigInt {
    return this.value1;
  }

  getRemainingAmount(): BigInt {
    return this.value2;
  }

  getAccRewardsPerShare(): BigInt {
    return this.value3;
  }
}

export class NitroPool__rewardsToken2Result {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: Address, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getToken(): Address {
    return this.value0;
  }

  getAmount(): BigInt {
    return this.value1;
  }

  getRemainingAmount(): BigInt {
    return this.value2;
  }

  getAccRewardsPerShare(): BigInt {
    return this.value3;
  }
}

export class NitroPool__settingsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: boolean;
  value8: string;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: boolean,
    value8: string
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromBoolean(this.value7));
    map.set("value8", ethereum.Value.fromString(this.value8));
    return map;
  }

  getStartTime(): BigInt {
    return this.value0;
  }

  getEndTime(): BigInt {
    return this.value1;
  }

  getHarvestStartTime(): BigInt {
    return this.value2;
  }

  getDepositEndTime(): BigInt {
    return this.value3;
  }

  getLockDurationReq(): BigInt {
    return this.value4;
  }

  getLockEndReq(): BigInt {
    return this.value5;
  }

  getDepositAmountReq(): BigInt {
    return this.value6;
  }

  getWhitelist(): boolean {
    return this.value7;
  }

  getDescription(): string {
    return this.value8;
  }
}

export class NitroPool__userInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getTotalDepositAmount(): BigInt {
    return this.value0;
  }

  getRewardDebtToken1(): BigInt {
    return this.value1;
  }

  getRewardDebtToken2(): BigInt {
    return this.value2;
  }

  getPendingRewardsToken1(): BigInt {
    return this.value3;
  }

  getPendingRewardsToken2(): BigInt {
    return this.value4;
  }
}

export class NitroPool extends ethereum.SmartContract {
  static bind(address: Address): NitroPool {
    return new NitroPool("NitroPool", address);
  }

  creationTime(): BigInt {
    let result = super.call("creationTime", "creationTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_creationTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("creationTime", "creationTime():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  customReqContract(): Address {
    let result = super.call(
      "customReqContract",
      "customReqContract():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_customReqContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "customReqContract",
      "customReqContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  emergencyClose(): boolean {
    let result = super.call("emergencyClose", "emergencyClose():(bool)", []);

    return result[0].toBoolean();
  }

  try_emergencyClose(): ethereum.CallResult<boolean> {
    let result = super.tryCall("emergencyClose", "emergencyClose():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  grailToken(): Address {
    let result = super.call("grailToken", "grailToken():(address)", []);

    return result[0].toAddress();
  }

  try_grailToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("grailToken", "grailToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isWhitelisted(account: Address): boolean {
    let result = super.call("isWhitelisted", "isWhitelisted(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_isWhitelisted(account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isWhitelisted",
      "isWhitelisted(address):(bool)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastRewardTime(): BigInt {
    let result = super.call("lastRewardTime", "lastRewardTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lastRewardTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastRewardTime",
      "lastRewardTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nftPool(): Address {
    let result = super.call("nftPool", "nftPool():(address)", []);

    return result[0].toAddress();
  }

  try_nftPool(): ethereum.CallResult<Address> {
    let result = super.tryCall("nftPool", "nftPool():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  onERC721Received(
    param0: Address,
    from: Address,
    tokenId: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    from: Address,
    tokenId: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onNFTAddToPosition(
    operator: Address,
    tokenId: BigInt,
    amount: BigInt
  ): boolean {
    let result = super.call(
      "onNFTAddToPosition",
      "onNFTAddToPosition(address,uint256,uint256):(bool)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_onNFTAddToPosition(
    operator: Address,
    tokenId: BigInt,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "onNFTAddToPosition",
      "onNFTAddToPosition(address,uint256,uint256):(bool)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  onNFTHarvest(
    operator: Address,
    to: Address,
    tokenId: BigInt,
    grailAmount: BigInt,
    xGrailAmount: BigInt
  ): boolean {
    let result = super.call(
      "onNFTHarvest",
      "onNFTHarvest(address,address,uint256,uint256,uint256):(bool)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(grailAmount),
        ethereum.Value.fromUnsignedBigInt(xGrailAmount)
      ]
    );

    return result[0].toBoolean();
  }

  try_onNFTHarvest(
    operator: Address,
    to: Address,
    tokenId: BigInt,
    grailAmount: BigInt,
    xGrailAmount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "onNFTHarvest",
      "onNFTHarvest(address,address,uint256,uint256,uint256):(bool)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(grailAmount),
        ethereum.Value.fromUnsignedBigInt(xGrailAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  onNFTWithdraw(param0: Address, param1: BigInt, param2: BigInt): boolean {
    let result = super.call(
      "onNFTWithdraw",
      "onNFTWithdraw(address,uint256,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );

    return result[0].toBoolean();
  }

  try_onNFTWithdraw(
    param0: Address,
    param1: BigInt,
    param2: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "onNFTWithdraw",
      "onNFTWithdraw(address,uint256,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pendingRewards(account: Address): NitroPool__pendingRewardsResult {
    let result = super.call(
      "pendingRewards",
      "pendingRewards(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return new NitroPool__pendingRewardsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_pendingRewards(
    account: Address
  ): ethereum.CallResult<NitroPool__pendingRewardsResult> {
    let result = super.tryCall(
      "pendingRewards",
      "pendingRewards(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NitroPool__pendingRewardsResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  publishTime(): BigInt {
    let result = super.call("publishTime", "publishTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_publishTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("publishTime", "publishTime():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  published(): boolean {
    let result = super.call("published", "published():(bool)", []);

    return result[0].toBoolean();
  }

  try_published(): ethereum.CallResult<boolean> {
    let result = super.tryCall("published", "published():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  rewardsToken1(): NitroPool__rewardsToken1Result {
    let result = super.call(
      "rewardsToken1",
      "rewardsToken1():(address,uint256,uint256,uint256)",
      []
    );

    return new NitroPool__rewardsToken1Result(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_rewardsToken1(): ethereum.CallResult<NitroPool__rewardsToken1Result> {
    let result = super.tryCall(
      "rewardsToken1",
      "rewardsToken1():(address,uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NitroPool__rewardsToken1Result(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  rewardsToken1PerSecond(): BigInt {
    let result = super.call(
      "rewardsToken1PerSecond",
      "rewardsToken1PerSecond():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_rewardsToken1PerSecond(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardsToken1PerSecond",
      "rewardsToken1PerSecond():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardsToken2(): NitroPool__rewardsToken2Result {
    let result = super.call(
      "rewardsToken2",
      "rewardsToken2():(address,uint256,uint256,uint256)",
      []
    );

    return new NitroPool__rewardsToken2Result(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_rewardsToken2(): ethereum.CallResult<NitroPool__rewardsToken2Result> {
    let result = super.tryCall(
      "rewardsToken2",
      "rewardsToken2():(address,uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NitroPool__rewardsToken2Result(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  rewardsToken2PerSecond(): BigInt {
    let result = super.call(
      "rewardsToken2PerSecond",
      "rewardsToken2PerSecond():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_rewardsToken2PerSecond(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardsToken2PerSecond",
      "rewardsToken2PerSecond():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  settings(): NitroPool__settingsResult {
    let result = super.call(
      "settings",
      "settings():(uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool,string)",
      []
    );

    return new NitroPool__settingsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBoolean(),
      result[8].toString()
    );
  }

  try_settings(): ethereum.CallResult<NitroPool__settingsResult> {
    let result = super.tryCall(
      "settings",
      "settings():(uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool,string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NitroPool__settingsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBoolean(),
        value[8].toString()
      )
    );
  }

  tokenIdOwner(param0: BigInt): Address {
    let result = super.call("tokenIdOwner", "tokenIdOwner(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_tokenIdOwner(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "tokenIdOwner",
      "tokenIdOwner(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalDepositAmount(): BigInt {
    let result = super.call(
      "totalDepositAmount",
      "totalDepositAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalDepositAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalDepositAmount",
      "totalDepositAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userInfo(param0: Address): NitroPool__userInfoResult {
    let result = super.call(
      "userInfo",
      "userInfo(address):(uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new NitroPool__userInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_userInfo(
    param0: Address
  ): ethereum.CallResult<NitroPool__userInfoResult> {
    let result = super.tryCall(
      "userInfo",
      "userInfo(address):(uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NitroPool__userInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  userTokenId(account: Address, index: BigInt): BigInt {
    let result = super.call(
      "userTokenId",
      "userTokenId(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toBigInt();
  }

  try_userTokenId(
    account: Address,
    index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userTokenId",
      "userTokenId(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userTokenIdsLength(account: Address): BigInt {
    let result = super.call(
      "userTokenIdsLength",
      "userTokenIdsLength(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_userTokenIdsLength(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userTokenIdsLength",
      "userTokenIdsLength(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  whitelistAddress(index: BigInt): Address {
    let result = super.call(
      "whitelistAddress",
      "whitelistAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );

    return result[0].toAddress();
  }

  try_whitelistAddress(index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "whitelistAddress",
      "whitelistAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  whitelistLength(): BigInt {
    let result = super.call(
      "whitelistLength",
      "whitelistLength():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_whitelistLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "whitelistLength",
      "whitelistLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  xGrailToken(): Address {
    let result = super.call("xGrailToken", "xGrailToken():(address)", []);

    return result[0].toAddress();
  }

  try_xGrailToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("xGrailToken", "xGrailToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get grailToken_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get xGrailToken_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get owner_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get nftPool_(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get rewardsToken1_(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get rewardsToken2_(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get settings_(): ConstructorCallSettings_Struct {
    return changetype<ConstructorCallSettings_Struct>(
      this._call.inputValues[6].value.toTuple()
    );
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCallSettings_Struct extends ethereum.Tuple {
  get startTime(): BigInt {
    return this[0].toBigInt();
  }

  get endTime(): BigInt {
    return this[1].toBigInt();
  }

  get harvestStartTime(): BigInt {
    return this[2].toBigInt();
  }

  get depositEndTime(): BigInt {
    return this[3].toBigInt();
  }

  get lockDurationReq(): BigInt {
    return this[4].toBigInt();
  }

  get lockEndReq(): BigInt {
    return this[5].toBigInt();
  }

  get depositAmountReq(): BigInt {
    return this[6].toBigInt();
  }

  get whitelist(): boolean {
    return this[7].toBoolean();
  }

  get description(): string {
    return this[8].toString();
  }
}

export class ActivateEmergencyCloseCall extends ethereum.Call {
  get inputs(): ActivateEmergencyCloseCall__Inputs {
    return new ActivateEmergencyCloseCall__Inputs(this);
  }

  get outputs(): ActivateEmergencyCloseCall__Outputs {
    return new ActivateEmergencyCloseCall__Outputs(this);
  }
}

export class ActivateEmergencyCloseCall__Inputs {
  _call: ActivateEmergencyCloseCall;

  constructor(call: ActivateEmergencyCloseCall) {
    this._call = call;
  }
}

export class ActivateEmergencyCloseCall__Outputs {
  _call: ActivateEmergencyCloseCall;

  constructor(call: ActivateEmergencyCloseCall) {
    this._call = call;
  }
}

export class AddRewardsCall extends ethereum.Call {
  get inputs(): AddRewardsCall__Inputs {
    return new AddRewardsCall__Inputs(this);
  }

  get outputs(): AddRewardsCall__Outputs {
    return new AddRewardsCall__Outputs(this);
  }
}

export class AddRewardsCall__Inputs {
  _call: AddRewardsCall;

  constructor(call: AddRewardsCall) {
    this._call = call;
  }

  get amountToken1(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amountToken2(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AddRewardsCall__Outputs {
  _call: AddRewardsCall;

  constructor(call: AddRewardsCall) {
    this._call = call;
  }
}

export class EmergencyWithdrawCall extends ethereum.Call {
  get inputs(): EmergencyWithdrawCall__Inputs {
    return new EmergencyWithdrawCall__Inputs(this);
  }

  get outputs(): EmergencyWithdrawCall__Outputs {
    return new EmergencyWithdrawCall__Outputs(this);
  }
}

export class EmergencyWithdrawCall__Inputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class EmergencyWithdrawCall__Outputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }
}

export class HarvestCall extends ethereum.Call {
  get inputs(): HarvestCall__Inputs {
    return new HarvestCall__Inputs(this);
  }

  get outputs(): HarvestCall__Outputs {
    return new HarvestCall__Outputs(this);
  }
}

export class HarvestCall__Inputs {
  _call: HarvestCall;

  constructor(call: HarvestCall) {
    this._call = call;
  }
}

export class HarvestCall__Outputs {
  _call: HarvestCall;

  constructor(call: HarvestCall) {
    this._call = call;
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OnNFTAddToPositionCall extends ethereum.Call {
  get inputs(): OnNFTAddToPositionCall__Inputs {
    return new OnNFTAddToPositionCall__Inputs(this);
  }

  get outputs(): OnNFTAddToPositionCall__Outputs {
    return new OnNFTAddToPositionCall__Outputs(this);
  }
}

export class OnNFTAddToPositionCall__Inputs {
  _call: OnNFTAddToPositionCall;

  constructor(call: OnNFTAddToPositionCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class OnNFTAddToPositionCall__Outputs {
  _call: OnNFTAddToPositionCall;

  constructor(call: OnNFTAddToPositionCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class OnNFTHarvestCall extends ethereum.Call {
  get inputs(): OnNFTHarvestCall__Inputs {
    return new OnNFTHarvestCall__Inputs(this);
  }

  get outputs(): OnNFTHarvestCall__Outputs {
    return new OnNFTHarvestCall__Outputs(this);
  }
}

export class OnNFTHarvestCall__Inputs {
  _call: OnNFTHarvestCall;

  constructor(call: OnNFTHarvestCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get grailAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get xGrailAmount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class OnNFTHarvestCall__Outputs {
  _call: OnNFTHarvestCall;

  constructor(call: OnNFTHarvestCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class PublishCall extends ethereum.Call {
  get inputs(): PublishCall__Inputs {
    return new PublishCall__Inputs(this);
  }

  get outputs(): PublishCall__Outputs {
    return new PublishCall__Outputs(this);
  }
}

export class PublishCall__Inputs {
  _call: PublishCall;

  constructor(call: PublishCall) {
    this._call = call;
  }
}

export class PublishCall__Outputs {
  _call: PublishCall;

  constructor(call: PublishCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class ResetWhitelistCall extends ethereum.Call {
  get inputs(): ResetWhitelistCall__Inputs {
    return new ResetWhitelistCall__Inputs(this);
  }

  get outputs(): ResetWhitelistCall__Outputs {
    return new ResetWhitelistCall__Outputs(this);
  }
}

export class ResetWhitelistCall__Inputs {
  _call: ResetWhitelistCall;

  constructor(call: ResetWhitelistCall) {
    this._call = call;
  }
}

export class ResetWhitelistCall__Outputs {
  _call: ResetWhitelistCall;

  constructor(call: ResetWhitelistCall) {
    this._call = call;
  }
}

export class SetCustomReqContractCall extends ethereum.Call {
  get inputs(): SetCustomReqContractCall__Inputs {
    return new SetCustomReqContractCall__Inputs(this);
  }

  get outputs(): SetCustomReqContractCall__Outputs {
    return new SetCustomReqContractCall__Outputs(this);
  }
}

export class SetCustomReqContractCall__Inputs {
  _call: SetCustomReqContractCall;

  constructor(call: SetCustomReqContractCall) {
    this._call = call;
  }

  get contractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetCustomReqContractCall__Outputs {
  _call: SetCustomReqContractCall;

  constructor(call: SetCustomReqContractCall) {
    this._call = call;
  }
}

export class SetDateSettingsCall extends ethereum.Call {
  get inputs(): SetDateSettingsCall__Inputs {
    return new SetDateSettingsCall__Inputs(this);
  }

  get outputs(): SetDateSettingsCall__Outputs {
    return new SetDateSettingsCall__Outputs(this);
  }
}

export class SetDateSettingsCall__Inputs {
  _call: SetDateSettingsCall;

  constructor(call: SetDateSettingsCall) {
    this._call = call;
  }

  get endTime_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get harvestStartTime_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get depositEndTime_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetDateSettingsCall__Outputs {
  _call: SetDateSettingsCall;

  constructor(call: SetDateSettingsCall) {
    this._call = call;
  }
}

export class SetDescriptionCall extends ethereum.Call {
  get inputs(): SetDescriptionCall__Inputs {
    return new SetDescriptionCall__Inputs(this);
  }

  get outputs(): SetDescriptionCall__Outputs {
    return new SetDescriptionCall__Outputs(this);
  }
}

export class SetDescriptionCall__Inputs {
  _call: SetDescriptionCall;

  constructor(call: SetDescriptionCall) {
    this._call = call;
  }

  get description(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetDescriptionCall__Outputs {
  _call: SetDescriptionCall;

  constructor(call: SetDescriptionCall) {
    this._call = call;
  }
}

export class SetRequirementsCall extends ethereum.Call {
  get inputs(): SetRequirementsCall__Inputs {
    return new SetRequirementsCall__Inputs(this);
  }

  get outputs(): SetRequirementsCall__Outputs {
    return new SetRequirementsCall__Outputs(this);
  }
}

export class SetRequirementsCall__Inputs {
  _call: SetRequirementsCall;

  constructor(call: SetRequirementsCall) {
    this._call = call;
  }

  get lockDurationReq_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get lockEndReq_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get depositAmountReq_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get whitelist_(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }
}

export class SetRequirementsCall__Outputs {
  _call: SetRequirementsCall;

  constructor(call: SetRequirementsCall) {
    this._call = call;
  }
}

export class SetRewardsToken2Call extends ethereum.Call {
  get inputs(): SetRewardsToken2Call__Inputs {
    return new SetRewardsToken2Call__Inputs(this);
  }

  get outputs(): SetRewardsToken2Call__Outputs {
    return new SetRewardsToken2Call__Outputs(this);
  }
}

export class SetRewardsToken2Call__Inputs {
  _call: SetRewardsToken2Call;

  constructor(call: SetRewardsToken2Call) {
    this._call = call;
  }

  get rewardsToken2_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetRewardsToken2Call__Outputs {
  _call: SetRewardsToken2Call;

  constructor(call: SetRewardsToken2Call) {
    this._call = call;
  }
}

export class SetWhitelistCall extends ethereum.Call {
  get inputs(): SetWhitelistCall__Inputs {
    return new SetWhitelistCall__Inputs(this);
  }

  get outputs(): SetWhitelistCall__Outputs {
    return new SetWhitelistCall__Outputs(this);
  }
}

export class SetWhitelistCall__Inputs {
  _call: SetWhitelistCall;

  constructor(call: SetWhitelistCall) {
    this._call = call;
  }

  get whitelistStatuses(): Array<SetWhitelistCallWhitelistStatusesStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      SetWhitelistCallWhitelistStatusesStruct
    >();
  }
}

export class SetWhitelistCall__Outputs {
  _call: SetWhitelistCall;

  constructor(call: SetWhitelistCall) {
    this._call = call;
  }
}

export class SetWhitelistCallWhitelistStatusesStruct extends ethereum.Tuple {
  get account(): Address {
    return this[0].toAddress();
  }

  get status(): boolean {
    return this[1].toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdatePoolCall extends ethereum.Call {
  get inputs(): UpdatePoolCall__Inputs {
    return new UpdatePoolCall__Inputs(this);
  }

  get outputs(): UpdatePoolCall__Outputs {
    return new UpdatePoolCall__Outputs(this);
  }
}

export class UpdatePoolCall__Inputs {
  _call: UpdatePoolCall;

  constructor(call: UpdatePoolCall) {
    this._call = call;
  }
}

export class UpdatePoolCall__Outputs {
  _call: UpdatePoolCall;

  constructor(call: UpdatePoolCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawRewardsCall extends ethereum.Call {
  get inputs(): WithdrawRewardsCall__Inputs {
    return new WithdrawRewardsCall__Inputs(this);
  }

  get outputs(): WithdrawRewardsCall__Outputs {
    return new WithdrawRewardsCall__Outputs(this);
  }
}

export class WithdrawRewardsCall__Inputs {
  _call: WithdrawRewardsCall;

  constructor(call: WithdrawRewardsCall) {
    this._call = call;
  }

  get amountToken1(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amountToken2(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawRewardsCall__Outputs {
  _call: WithdrawRewardsCall;

  constructor(call: WithdrawRewardsCall) {
    this._call = call;
  }
}
