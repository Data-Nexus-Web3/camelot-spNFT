type Protocol @entity {
  " The address of the core factory for camelot "
  id: Bytes!

  " The number of pools deployed "
  poolCount: Int!

  " Sub entity to traverse into the pools from the protocol level "
  pools: [Pool!]! @derivedFrom(field: "protocol")
}

# Pools represent the different types of token pairs and the liquidity provided
type Pool @entity {
  " The address for the pool "
  id: Bytes!

  " Creation timestamp of the pool "
  createdAt: Timestamp!

  " Link to the protocol entity "
  protocol: Protocol!

  " Sub entity to traverse into the positions from the pool level "
  positions: [Position!]! @derivedFrom(field: "pool")

  " Token0 "
  token0: Token!

  " Token1 "
  token1: Token!
}

type Account @entity {
  " The address of the wallet "
  id: Bytes!

  " Number of positions this account has "
  positionCount: Int!

  " Sub entity to traverse into The current positions for the wallet "
  positions: [Position!]! @derivedFrom(field: "account")

  " Number of open positions this account has "
  openPositionCount: Int!
}

type spNFT @entity{
  " Token address "
  id: ID!

  " Owner of the spNFT " 
  owner: Address!

  " Creation timestamp of the spNFT "
  createdAt: Timestamp!

  " The position of the spNFT "
  positions: [Position!]! @derivedFrom(field: "spNFT")

  " Whether the spNFT is boosted or not "
  boost: Boolean!

  " Amount the spNFT is boosted by "
  boostAmount: Int  
}

type Nitro @entity {
  " Token address "
  id: Address!

  " Creation timestamp "
  createdAt: Timestamp!

  " Pool owner "
  poolOwner: Address!

  " Amount deposited into pool "
  depositAmount: BigInt!

  " Amount withdrawn from the pool "
  withdrawAmount: 
}

type Position @entity {
  " {pool id}-{account id} "
  id: ID!

  " The account that created the position "
  account: Account!

  " The pool that the position relates to "
  pool: Pool!

  " Amount of the CMLT-LP token for the pair "
  amount: BigInt!

  " Timestampe of the lock + Lock duration in seconds "
  lockedUntil: BigInt!

  " Boost points assigned - equal to the amount of xGrail used to boost the position "
  boostPoints: BigInt!
}

type Token @entity {
  " Token address "
  id: ID!

  " Token symbol "
  symbol: String!

  " Token name "
  name: String!

  " Token decimals "
  decimals: Int!
}
